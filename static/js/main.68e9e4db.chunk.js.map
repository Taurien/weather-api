{"version":3,"sources":["context/WeatherContext.jsx","components/Home/Form/WeatherForm.jsx","components/Custom/CityInformation/CityInformation.jsx","components/Custom/Loader/Loader.jsx","views/Home/Home.jsx","hooks/useFetch.jsx","views/WeatherInformation/WeatherInformation.jsx","App.js","reportWebVitals.js","index.js"],"names":["WeatherContext","createContext","WeatherContextProvider","children","useState","dataFromIP","setDataFromIP","weather","setWeather","gpsError","setGpsError","fetchAndSetWeather","lat","lon","a","latitude","toFixed","longitude","axios","get","process","currentWeather","data","weatherOnIp","res","IPv4","city","continent","continent_code","country","country_code","flag","region","timezone","useEffect","extraData","coord","forecast","airPollution","message","undefined","handleWeather","el","locationByGps","e","navigator","geolocation","getCurrentPosition","pos","coords","console","log","err","warn","code","enableHighAccuracy","timeout","maximumAge","Provider","value","WeatherForm","handleCity","handleFetch","action","className","onSubmit","type","placeholder","onChange","target","CityInformation","min","navigate","useNavigate","useContext","ForecastSection","list","map","elm","item","dt","Date","padStart","obj","String","getHours","getMinutes","description","src","icon","alt","main","temp_max","temp_min","humidity","name","sys","parseInt","temp","feels_like","wind","speed","deg","onClick","pathname","Loader","Home","ciytName","setCiytName","API","response","setResponse","loader","setLoader","preventDefault","useFetch","WeatherInformation","App","hours","background","exact","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.68e9e4db.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport React, { createContext, useState, useEffect } from 'react'\r\n\r\nconst WeatherContext = createContext()\r\n\r\nconst WeatherContextProvider = ({ children }) => {\r\n\r\n    const [ dataFromIP, setDataFromIP ] = useState(null)\r\n    const [ weather, setWeather] = useState(null)\r\n    const [ gpsError, setGpsError] = useState(false)\r\n\r\n    const handleWeather = (el) => setWeather(el)\r\n\r\n    const fetchAndSetWeather = async (lat, lon) => {\r\n        const latitude = +lat.toFixed(2)\r\n        const longitude = +lon.toFixed(2)\r\n        \r\n        const currentWeather = await axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${process.env.REACT_APP_API_KEY}`)\r\n\r\n        setWeather({\r\n            currentWeather: currentWeather.data,\r\n        })\r\n    }\r\n\r\n    const weatherOnIp = async () => {\r\n        const res = await axios.get('https://geolocation-db.com/json/')\r\n        const { IPv4 } = res.data\r\n\r\n        const { data } = await axios.get(`https://ipgeolocation.abstractapi.com/v1/?api_key=${process.env.REACT_APP_IPSTACK_KEY}&ip_address=${IPv4}`)\r\n        \r\n        // console.log(data)\r\n        const {\r\n            city,\r\n            continent,\r\n            continent_code,\r\n            country,\r\n            country_code,\r\n            flag,\r\n            latitude,\r\n            longitude,\r\n            region,\r\n            timezone} = data\r\n\r\n        setDataFromIP({\r\n            city,\r\n            continent,\r\n            continent_code,\r\n            country,\r\n            country_code,\r\n            flag,\r\n            latitude,\r\n            longitude,\r\n            region,\r\n            timezone\r\n        })\r\n\r\n        fetchAndSetWeather(latitude, longitude)\r\n    }\r\n\r\n    useEffect(() => {\r\n        weatherOnIp()\r\n    },[])\r\n\r\n    // \r\n\r\n    const extraData = async (currentWeather) => {\r\n        const {lon, lat} = currentWeather.coord\r\n        \r\n        // const currentDate = new Date()\r\n        // const toTimestamp = (date) => Math.floor(date.getTime()/1000)\r\n\r\n        // const daysBefore = currentDate.setDate(currentDate.getDate() - 2)\r\n        // const daysAfter = currentDate.setDate(currentDate.getDate() + 2)\r\n        \r\n        // const start = toTimestamp(new Date(daysBefore))\r\n        // const start = toTimestamp(currentDate)\r\n        // const end = toTimestamp(new Date(daysAfter))\r\n\r\n        const forecast = await axios.get(`https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&cnt=${9}&appid=${process.env.REACT_APP_API_KEY}`)\r\n        // const airPollution = await axios.get(`http://api.openweathermap.org/data/2.5/air_pollution/forecast?lat=${lat}&lon=${lon}&start=${start}&end=${end}&appid=${process.env.REACT_APP_API_KEY}`)\r\n        const airPollution = await axios.get(`http://api.openweathermap.org/data/2.5/air_pollution/forecast?lat=${lat}&lon=${lon}&appid=${process.env.REACT_APP_API_KEY}`)\r\n\r\n        setWeather({\r\n            ...weather,\r\n            forecast: forecast.data,\r\n            airPollution: airPollution.data\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!weather?.currentWeather.message && weather?.currentWeather !== undefined) extraData(weather.currentWeather)\r\n    },[weather?.currentWeather])\r\n\r\n    \r\n    const locationByGps = (e) => {\r\n        const options = {\r\n            enableHighAccuracy: true,\r\n            timeout: 5000,\r\n            maximumAge: 0\r\n        };\r\n\r\n        const success = (pos) => {\r\n            // console.log(pos)\r\n            const coords = pos.coords;\r\n            setGpsError(false)\r\n\r\n            console.log('Your current position is:');\r\n            console.log(`Latitude : ${coords.latitude}`);\r\n            console.log(`Longitude: ${coords.longitude}`);\r\n            // console.log(`More or less ${coords.accuracy} meters.`);\r\n            fetchAndSetWeather(coords.latitude, coords.longitude)\r\n        }\r\n\r\n        const error = (err) => {\r\n            console.log(err)\r\n            console.warn(`ERROR(${err.code}): ${err.message}`);\r\n            setGpsError(true)\r\n        }\r\n\r\n        navigator.geolocation.getCurrentPosition(success, error, options);\r\n    }\r\n\r\n        \r\n    const data = {\r\n        dataFromIP,\r\n        weather,\r\n        handleWeather,\r\n        locationByGps,\r\n        gpsError\r\n    }\r\n    \r\n    return (\r\n        <WeatherContext.Provider value={ data }>\r\n            {children}\r\n        </WeatherContext.Provider>\r\n    )\r\n}\r\n\r\nexport { WeatherContextProvider }\r\nexport default WeatherContext\r\n","import React from 'react'\r\n\r\nimport '../Form/WeatherForm.style.scss'\r\n\r\nconst WeatherForm = ({ handleCity, handleFetch }) => {\r\n    return (\r\n        <form action=''\r\n        className='self-center absolute overflow-hidden rounded-full'\r\n        onSubmit={e => handleFetch(e)}>\r\n            <input\r\n                type=\"text\"\r\n                placeholder='City Name'\r\n                onChange={({ target }) => handleCity(target)}\r\n                className='w-8/12 px-4 py-1'\r\n            />\r\n            <input\r\n                type=\"submit\"\r\n                value='Search'\r\n                className='w-4/12 px-4 py-1'\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default WeatherForm\r\n","import React, { useContext, useState } from 'react'\r\n//Router\r\nimport { useNavigate } from 'react-router-dom'\r\n//Style\r\nimport './CityInformation.style.scss'\r\nimport WeatherContext from '../../../context/WeatherContext'\r\n\r\n\r\nconst CityInformation = ({ currentWeather, forecast, airPollution, min = false, ...props }) => {\r\n    \r\n    const navigate = useNavigate()\r\n    const { weather } = useContext(WeatherContext)\r\n    // const { currentWeather, forecast, airPollution } = weather\r\n    // console.log(currentWeather, forecast, airPollution, min, props)\r\n\r\n    const [ celsius, setCelsius] = useState(false)\r\n    \r\n    const seeMoreNav = () => {\r\n        navigate({ pathname: `/weather/${currentWeather.name}` })\r\n    }\r\n\r\n    const ForecastSection = () => (\r\n        <div className='forecast w-full flex flex-row py-2  overflow-scroll'>\r\n            {\r\n                forecast?.list.map((elm, item) => {\r\n                    const dt = new Date(elm.dt*1000)\r\n                    const padStart = obj => String(obj).padStart(2, \"0\")\r\n                    return (\r\n                        <div key={item} className='forecast_item flex flex-col items-center px-1'>\r\n                            <p className=' text-center'>{padStart(dt.getHours())}:{padStart(dt.getMinutes())}</p>\r\n                            <div className='flex flex-col items-center'>\r\n                                <p className='min-w-max  font-bold text-center capitalize'>{elm.weather[0].description}</p>\r\n                                <img className=' w-14' src={`http://openweathermap.org/img/wn/${elm.weather[0].icon}@2x.png`} alt={elm.weather[0].main} />\r\n                            </div>\r\n                            <div className=''>\r\n                                <p>{elm.main.temp_max}</p>\r\n                                <hr />\r\n                                <p>{elm.main.temp_min}</p>\r\n                            </div>\r\n                            <p className=''>Humidity:{elm.main.humidity}%</p>\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n    \r\n    \r\n    return (\r\n        <div className='cityinfocard relative self-center desktop:min-w-min mobile:w-9/12 flex flex-col items-center rounded-lg p-3 mx-4 text-xs'>\r\n            {\r\n                currentWeather.message?\r\n                <>\r\n                    <p>{currentWeather.message}</p>\r\n                </> \r\n                : \r\n                <>\r\n                    <div className='self-end inline-flex items-center font-bold text-sm'>\r\n                        <p>{currentWeather.name} | {currentWeather.sys.country}</p>\r\n                        <img className='h-4 ml-1' src={`https://countryflagsapi.com/svg/${currentWeather.sys.country}`} alt={`${currentWeather.sys.country} flag`} />\r\n                    </div>\r\n                    \r\n                    <div className='h-20 w-64 inline-flex items-center justify-evenly overflow-hidden mb-2'>\r\n                        <div className='relative w-24 h-24 flex flex-col justify-center'>\r\n                            <p className='text-5xl text-center'>{parseInt(currentWeather.main.temp-273.15)}°</p>\r\n                            <p className='w-full absolute bottom-2 left-1/2 transform-center text-center '>Feels like <b>{currentWeather.main.feels_like}°</b></p>\r\n                        </div>\r\n                        <div className=' relative w-24 h-24 flex flex-col justify-center'>\r\n                            <img className='' src={`http://openweathermap.org/img/wn/${currentWeather.weather[0].icon}@2x.png`} alt={currentWeather.weather[0].main} />\r\n                            <p className='w-full absolute bottom-2 left-1/2 transform-center text-center  font-bold capitalize'>{currentWeather.weather[0].description}</p>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <p className=''>Humidity: {currentWeather.main.humidity}%</p>\r\n                    <p className=' mb-2'>{currentWeather.main.temp_max}°/{currentWeather.main.temp_min}°</p>\r\n                </>\r\n            }\r\n\r\n            {/* {\r\n                !currentWeather.message && \r\n                    <div className='absolute top-0 left-0'>\r\n                        <button>F</button>\r\n                        <button>C</button>\r\n                    </div>\r\n            } */}\r\n\r\n            {\r\n                !currentWeather.message && !min &&\r\n                <>\r\n                    <div className='inline-flex'>\r\n                        <p>{currentWeather.wind.speed} km/h</p>\r\n                        <p>{currentWeather.wind.deg}°</p>\r\n                    </div>\r\n                    <ForecastSection />\r\n                </>\r\n            }\r\n\r\n            {\r\n                !currentWeather.message && min &&\r\n                <button className=' border border-solid border-yellow-300 px-2 py-1 text-base' onClick={seeMoreNav} >See more</button> \r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CityInformation\r\n","import React from 'react'\r\n\r\nconst Loader = () => {\r\n    return (\r\n        <div className='load self-center'>\r\n            <span>Loading...</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loader","import React, { useContext, useState, useEffect } from 'react';\r\nimport WeatherContext from '../../context/WeatherContext';\r\n//Custom hooks\r\nimport { useFetch } from '../../hooks/useFetch';\r\n//Components\r\nimport WeatherForm from '../../components/Home/Form/WeatherForm';\r\nimport CityInformation from '../../components/Custom/CityInformation/CityInformation';\r\nimport Loader from '../../components/Custom/Loader/Loader';\r\n\r\nconst Home = () => {\r\n\r\n  const [ ciytName, setCiytName ] = useState('')\r\n\r\n  const { dataFromIP, weather, handleWeather, locationByGps, gpsError } = useContext(WeatherContext) \r\n  // console.log(weather)\r\n  \r\n  //Functions\r\n  const handleCity = ( {value} ) => {\r\n    setCiytName(value)\r\n  }\r\n\r\n  const { response, loader, handleFetch } = useFetch(`https://api.openweathermap.org/data/2.5/weather?q=${ciytName}&appid=${process.env.REACT_APP_API_KEY}`)\r\n\r\n  \r\n\r\n  useEffect(() => {\r\n    const dataToContext = () => handleWeather({currentWeather: response})\r\n\r\n    if (response !== null) dataToContext()\r\n  }, [response])\r\n\r\n\r\n  return (\r\n    <div className=\"homeview h-full flex flex-col justify-center\">\r\n      {\r\n        gpsError && <div>gps error</div>\r\n      }\r\n\r\n      <WeatherForm\r\n        handleCity={handleCity}\r\n        handleFetch={handleFetch}\r\n      />\r\n\r\n      {\r\n        (!dataFromIP || loader) && <Loader /> \r\n      }\r\n\r\n      {\r\n        dataFromIP && weather && <CityInformation  currentWeather={weather.currentWeather} forecast={weather.forecast} airPollution={weather.airPollution} min={true} />\r\n      }\r\n\r\n      <button className=' self-center border border-solid border-yellow-300 px-2 py-1 ' onClick={() => locationByGps()}>Use GPS</button>\r\n      \r\n    </div>      \r\n  )\r\n}\r\n\r\nexport default Home","import { useState/*, useEffect*/ } from 'react'\r\nimport axios from 'axios'\r\n\r\nexport const useFetch = API => {\r\n\r\n    const [ response, setResponse ] = useState(null)\r\n    const [ loader, setLoader ] = useState(false)\r\n    \r\n    const handleFetch = async e => {\r\n        e.preventDefault()\r\n        \r\n        setResponse(null)\r\n        setLoader(true)\r\n\r\n        try {\r\n            const res = await axios.get(API)\r\n            // console.log(res)\r\n            setResponse(res.data)\r\n        } catch (error) {\r\n            console.warn(error)  \r\n            setResponse(error.response.data)\r\n        }\r\n\r\n        \r\n        setLoader(false)\r\n        /*setTimeout(() => {\r\n            setResponse(result)\r\n            setLoader(false)\r\n        }, 1500)*/\r\n    }\r\n\r\n    // console.log(response)\r\n\r\n    return { response, loader, handleFetch }\r\n\r\n}","import React, { /*useState, useEffect,*/ useContext } from 'react'\r\nimport { useNavigate/*, useParams, useLocation, */ } from 'react-router'\r\n\r\nimport WeatherContext from '../../context/WeatherContext';\r\n\r\n//Components\r\nimport Loader from '../../components/Custom/Loader/Loader';\r\nimport CityInformation from '../../components/Custom/CityInformation/CityInformation'\r\n\r\nimport '../WeatherInformation/WeatherInformation.style.scss'\r\n\r\nconst WeatherInformation = () => {\r\n    \r\n    const { weather } = useContext(WeatherContext) \r\n    //console.log(weather)\r\n    \r\n    const navigate = useNavigate()\r\n    //const { name } = useParams()\r\n    \r\n    return (\r\n        <div className='weatherview h-full flex flex-col justify-center'>\r\n            {\r\n                weather ? (\r\n                <>\r\n                    <CityInformation currentWeather={weather.currentWeather} forecast={weather.forecast} airPollution={weather.airPollution} />\r\n                    <button className='self-center absolute  border border-solid border-yellow-300 px-2 py-1 text-base' onClick={() => navigate(-1)}>Go back</button>\r\n                </> \r\n                ) : <Loader />\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WeatherInformation\r\n","import React from \"react\";\nimport { Routes, Route } from \"react-router-dom\";\nimport { WeatherContextProvider } from \"./context/WeatherContext\";\n//Views\nimport Home from './views/Home/Home';\nimport WeatherInformation from './views/WeatherInformation/WeatherInformation';\n//Style\nimport Div100vh from 'react-div-100vh';\nimport './styles/App.style.scss';\n\nfunction App() {\n\n  const hours = new Date().getHours();\n\n  const background = hours >= 16 && hours <= 18 ? 'sunsetBg' : hours >= 6 && hours <= 15 ? 'dayBg' : 'nightBg'\n\n  return (\n    <Div100vh className={`flex flex-col ${background}`}>\n      <WeatherContextProvider>\n        <Routes>\n            <Route exact path='/weather-api' element={<Home />} />\n            <Route path='/weather/:name' element={<WeatherInformation />} />\n        </Routes>\n      </WeatherContextProvider>\n    </Div100vh>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}